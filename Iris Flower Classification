{"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.11.0"},"kaggle":{"accelerator":"none","dataSources":[],"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"Import librairies","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, classification_report\nfrom sklearn.pipeline import Pipeline\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"file_path = r'C:\\Users\\dell\\Downloads\\archive (3)\\Iris.csv'\n\ndata = pd.read_csv(file_path)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data.head()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data.isnull().sum()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Drop the 'Id' column as it is not useful for modeling","metadata":{}},{"cell_type":"code","source":"data.drop('Id',axis=1)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"x = data.drop('Species', axis=1)\ny = data['Species']","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_train,X_test,Y_train,Y_test= train_test_split(x,y,test_size=0.2,random_state=42)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pipeline = Pipeline([\n    ('clf', LogisticRegression(random_state=42))\n])","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"param_grid = {\n    'clf__penalty': ['l1', 'l2', 'elasticnet', None],  # Regularization technique\n    'clf__C': [0.01, 0.1, 1, 10, 100],  # Inverse of regularization strength\n    'clf__solver': ['lbfgs', 'saga', 'sag', 'liblinear', 'newton-cg', 'newton-cholesky'],  # Algorithm to use in the optimization problem\n    'clf__max_iter': [100, 200, 500]  # Maximum number of iterations to converge\n}","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"grid_search = GridSearchCV(pipeline, param_grid, cv=5, scoring='accuracy')\ngrid_search.fit(X_train,Y_train)\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"best_model = grid_search.best_estimator_","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_pred = best_model.predict(X_test)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Evaluating the model\naccuracy = accuracy_score(Y_test, y_pred)\nreport = classification_report(Y_test, y_pred)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\nprint(f'Best Parameters: {grid_search.best_params_}')\nprint(f'Accuracy: {accuracy}')\nprint('Classification Report:')\nprint(report)\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"cv_scores = cross_val_score(best_model, x, y, cv=5, scoring='accuracy')\nprint(f'Cross-validation Accuracy: {cv_scores.mean()}')","metadata":{},"execution_count":null,"outputs":[]}]}